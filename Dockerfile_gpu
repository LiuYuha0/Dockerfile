# GPU docker.

FROM nvidia/cuda:12.5.1-devel-ubuntu20.04

LABEL maintainer="liuyuhao@hust.edu.cn"

# nvidia runtime
ENV NVIDIA_VISIBLE_DEVICES \
    ${NVIDIA_VISIBLE_DEVICES:-all}
ENV NVIDIA_DRIVER_CAPABILITIES \
    ${NVIDIA_DRIVER_CAPABILITIES:+$NVIDIA_DRIVER_CAPABILITIES,}graphics

ENV DEBIAN_FRONTEND=noninteractive

ENV CERES_VERSION="1.14.0"

# install ros1 noetic
RUN /bin/bash -c 'echo "deb http://packages.ros.org/ros/ubuntu $(lsb_release -sc) main" > /etc/apt/sources.list.d/ros-latest.list' && \
    apt install curl \
    curl -sSL 'http://keyserver.ubuntu.com/pks/lookup?op=get&search=0xC1CF6E31E6BADE8868B172B4F42ED6FBAB17C654' | apt-key add - \
    apt update && \
    apt install -y ros-noetic-desktop-full

RUN apt update && apt install -y python3-rosdep python3-rosinstall python3-rosinstall-generator python3-wstool build-essential && \
    apt install -y python3-rosdep && rosdep init && rosdep update

# catkin tools
RUN apt update && apt install python3-catkin-tools python3-osrf-pycommon

# necessary tools/libs
RUN apt update && apt install -y \
    apt-utils \
    build-essential \
    pkg-config \
    psmisc \
    vim-gtk \
    git \
    libgtk-3-dev \
    libavcodec-dev \
    libavformat-dev \
    libswscale-dev \
    libv4l-dev \
    libxvidcore-dev \
    libx264-dev \
    libjpeg-dev \
    libpng-dev \
    libtiff-dev \
    gfortran \
    openexr \
    libatlas-base-dev \
    python3-dev \
    python3-numpy \
    libtbb2 \
    libtbb-dev \
    libdc1394-22-dev \
    libgl1-mesa-dev \
    libglew-dev \
    libegl1-mesa-dev \
    libwayland-dev \
    libxkbcommon-dev \
    wayland-protocols \
    libeigen3-dev \
    libvtk6-dev \
    libvtk6-qt-dev

# oh-my-bash
RUN /bin/bash -c "$(curl -fsSL https://raw.githubusercontent.com/ohmybash/oh-my-bash/master/tools/install.sh)"

# tools
RUN apt update && apt install -y terminator eog vim

COPY ./setup_ros1_bridge.sh /midea_robot/
COPY ./init_ws.sh /midea_robot/
RUN chmod +x /midea_robot/setup_ros1_bridge.sh /midea_robot/init_ws.sh

RUN apt update && apt install -y \
    google-mock \
    libceres-dev \
    liblua5.3-dev \
    libboost-dev \
    libboost-iostreams-dev \
    libprotobuf-dev \
    protobuf-compiler \
    libcairo2-dev \
    libpcl-dev \
    python3-sphinx

RUN apt update && apt install -y wget curl nano htop bash-completion

# install pandas
RUN ln -s /usr/bin/python3 /usr/bin/python && pip3 install pandas

# gflags & glog
RUN cd /tmp && git clone https://github.com/gflags/gflags.git && cd gflags && git checkout v2.2.2 && \
    mkdir build && cd build && cmake -DCMAKE_BUILD_TYPE=Release -DBUILD_SHARED_LIBS=ON .. && make -j && \
    make install && cd /tmp /rm -rf gflags

RUN cd /tmp && git clone https://github.com/google/glog.git && cd glog && git checkout v0.7.1 && \
    mkdir build && cd build && cmake -DCMAKE_BUILD_TYPE=Release -DBUILD_SHARED_LIBS=ON .. && make -j && make install && \
    cd /tmp && rm -rf glog

# gdb
RUN apt update && apt install -y gdb

# Pangolin
RUN cd /tmp && \
    git clone https://github.com/stevenlovegrove/Pangolin.git && \
    cd Pangolin && \
    mkdir build && \
    cd build && \
    cmake -DCMAKE_BUILD_TYPE=Release -DCMAKE_INSTALL_PREFIX=/usr/local .. && \
    cmake -j 8 --build . && \
    make install && \
    cd /tmp && rm -rf Pangolin

# Evo
RUN cd /tmp && \
    git clone https://github.com/MichaelGrupp/evo.git && \
    cd evo && \
    apt update && \
    apt install python3-pip -y && \
    pip3 install evo --upgrade && \
    cd /tmp && rm -rf evo

# PCL
RUN apt update && apt install -y libpcl-dev ros-noetic-pcl-conversions

# GTSAM
RUN cd /tmp && \
    git clone https://github.com/borglab/gtsam && cd gtsam && git checkout 4.2a5 && \
    mkdir build &&  cd build && \
    cmake -DCMAKE_BUILD_TYPE=Release -DGTSAM_BUILD_WITH_MARCH_NATIVE=OFF -DCMAKE_INSTALL_PREFIX=/usr/local .. && \
    make install -j8


