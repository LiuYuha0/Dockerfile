# GPU docker.

FROM nvidia/cuda:12.5.0-devel-ubuntu22.04

LABEL maintainer="liuyuhao@hust.edu.cn"

# nvidia runtime
ENV NVIDIA_VISIBLE_DEVICES \
    ${NVIDIA_VISIBLE_DEVICES:-all}
ENV NVIDIA_DRIVER_CAPABILITIES \
    ${NVIDIA_DRIVER_CAPABILITIES:+$NVIDIA_DRIVER_CAPABILITIES,}graphics

ENV DEBIAN_FRONTEND=noninteractive

ENV CERES_VERSION="1.14.0"

# Update and install common dependencies
RUN apt-get update && apt-get install -y \
    apt-utils \
    lsb-release \
    gnupg2 \
    curl \
    wget \
    git \
    build-essential \
    && rm -rf /var/lib/apt/lists/*
    
# Install ROS1 (Noetic)
RUN sh -c 'echo "deb http://packages.ros.org/ros/ubuntu $(lsb_release -sc) main" > /etc/apt/sources.list.d/ros-latest.list' \
    && curl -s https://raw.githubusercontent.com/ros/rosdistro/master/ros.asc | apt-key add - \
    && apt-get update && apt-get install -y \
    ros-noetic-desktop-full \
    && rosdep init \
    && rosdep update

RUN apt update && apt install -y python3-rosdep python3-rosinstall python3-rosinstall-generator python3-wstool && \
    apt install -y python3-rosdep && rosdep init && rosdep update

# catkin tools
RUN apt update && apt install python3-catkin-tools python3-osrf-pycommon

# Install ROS2 (Humble)
RUN apt-get update && apt-get install -y software-properties-common \
    && add-apt-repository universe \
    && apt-get update && apt-get install -y \
    curl \
    && curl -s https://raw.githubusercontent.com/ros/rosdistro/master/ros.key | apt-key add - \
    && sh -c 'echo "deb http://packages.ros.org/ros2/ubuntu $(lsb_release -cs) main" > /etc/apt/sources.list.d/ros2-latest.list' \
    && apt-get update && apt-get install -y \
    ros-humble-desktop

# Set US local
RUN apt update && apt install -y locales && locale-gen en_US en_US.UTF-8 && update-locale LC_ALL=en_US.UTF-8 LANG=en_US.UTF-8
ENV LANG=en_US.UTF-8

# necessary tools/libs
RUN apt update && apt install -y \
    pkg-config \
    psmisc \
    vim-gtk \
    libgtk-3-dev \
    libavcodec-dev \
    libavformat-dev \
    libswscale-dev \
    libv4l-dev \
    libxvidcore-dev \
    libx264-dev \
    libjpeg-dev \
    libpng-dev \
    libtiff-dev \
    gfortran \
    openexr \
    libatlas-base-dev \
    python3-dev \
    python3-numpy \
    libtbb2 \
    libtbb-dev \
    libdc1394-22-dev \
    libgl1-mesa-dev \
    libglew-dev \
    libegl1-mesa-dev \
    libwayland-dev \
    libxkbcommon-dev \
    wayland-protocols \
    libeigen3-dev \
    libvtk6-dev \
    libvtk6-qt-dev

# some ROS packages
RUN apt update && apt install -y \
    ros-noetic-robot-navigation \
    ros-noetic-rospy-message-converter \
    ros-noetic-amcl \
    ros-noetic-move-base \
    ros-noetic-hector-mapping \
    ros-humble-gazebo-ros-pkgs

# tools
RUN apt update && apt install -y terminator eog vim

# oh-my-bash
RUN /bin/bash -c "$(curl -fsSL https://raw.githubusercontent.com/ohmybash/oh-my-bash/master/tools/install.sh)"

COPY ./setup_ros1_bridge.sh /midea_robot/
COPY ./init_ws.sh /midea_robot/
RUN chmod +x /midea_robot/setup_ros1_bridge.sh /midea_robot/init_ws.sh

RUN apt update && apt install -y wget curl nano htop bash-completion

# install pandas
RUN ln -s /usr/bin/python3 /usr/bin/python && pip3 install pandas

# mako
RUN python3 -m pip install mako

# gflags & glog
RUN cd /tmp && git clone https://github.com/gflags/gflags.git && cd gflags && git checkout v2.2.2 && \
    mkdir build && cd build && cmake -DCMAKE_BUILD_TYPE=Release -DBUILD_SHARED_LIBS=ON .. && make -j && \
    make install && cd /tmp /rm -rf gflags

RUN cd /tmp && git clone https://github.com/google/glog.git && cd glog && git checkout v0.4.0 && \
    mkdir build && cd build && cmake -DCMAKE_BUILD_TYPE=Release -DBUILD_SHARED_LIBS=ON .. && make -j && make install && \
    cd /tmp && rm -rf glog
    
# gdb
RUN apt update && apt install -y gdb

# Pangolin
RUN cd /tmp && \
    git clone https://github.com/stevenlovegrove/Pangolin.git && \
    cd Pangolin && \
    mkdir build && \
    cd build && \
    cmake -DCMAKE_BUILD_TYPE=Release -DCMAKE_INSTALL_PREFIX=/usr/local .. && \
    cmake -j 8 --build . && \
    make install && \
    cd /tmp && rm -rf Pangolin
    
# Evo
RUN cd /tmp && \
    git clone https://github.com/MichaelGrupp/evo.git && \
    cd evo && \
    apt update && \
    apt install python3-pip -y && \
    pip3 install evo --upgrade && \
    cd /tmp && rm -rf evo

# PCL
RUN apt update && apt install -y libpcl-dev ros-humble-pcl-conversions

# GTSAM
RUN cd /tmp && \
    git clone https://github.com/borglab/gtsam && cd gtsam && \
    mkdir build &&  cd build && \
    cmake -DCMAKE_BUILD_TYPE=Release -DGTSAM_BUILD_WITH_MARCH_NATIVE=OFF -DCMAKE_INSTALL_PREFIX=/usr/local .. && \
    make install -j8

# Build and install Ceres
RUN   git clone https://ceres-solver.googlesource.com/ceres-solver && \
      cd ceres-solver && \
      git checkout ${CERES_VERSION} && \
      mkdir build && cd build && \
      cmake .. && \
      make install && \
      rm -rf ../../ceres-solver

RUN apt update && apt install -y ros-humble-nmea-msgs

RUN apt update && apt install -y ros-humble-perception-pcl

RUN apt update && apt install -y ros-humble-ros1-bridge libomp-dev gedit evince
